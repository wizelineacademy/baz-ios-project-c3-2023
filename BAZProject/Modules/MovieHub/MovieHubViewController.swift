//
//  MovieHubViewController.swift
//  BAZProject
//
//  Created Cristian Eduardo Villegas Alvarez on 11/04/23.
//  Copyright Â© 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Cristian Villegas
//

import UIKit

class MovieHubViewController: UIViewController, MovieHubViewProtocol {
    
    
    func onSectionsFetch(sections:[CVMovieHubViewEntitySection]) {        
        self.updateDashboard()
        CVLoader.stopLoading()
    }
    
    
    var presenter: MovieHubPresenterProtocol?
    
    @IBOutlet weak var collectionView:UICollectionView!
    @IBOutlet weak var labelHeaderView:UIView!
    @IBOutlet weak var searchTextfield:UITextField!
    
    
    func configureCollectionView() {
        let nib = UINib(nibName: "CVMovieCollectionViewCell", bundle: Bundle(for: CVMovieCollectionViewCell.self))
        self.collectionView.register(nib, forCellWithReuseIdentifier: "CVMovieCollectionViewCell")
        let headerNib = UINib(nibName: "MovieHeaderCollectionReusableView", bundle: Bundle(for: MovieHeaderCollectionReusableView.self))
        collectionView.register(headerNib, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: MovieHeaderCollectionReusableView.reuseIdentifier)
        self.collectionView.delegate = self
        self.collectionView.dataSource = self
    }
    @IBAction func trySearch() {
        UIView.animate(withDuration: 0.3, animations: {
            self.labelHeaderView.transform = CGAffineTransform(translationX: UIScreen.main.bounds.width + 100, y: 0)
            self.searchTextfield.layer.opacity = 1
            self.searchTextfield.transform = CGAffineTransform(translationX: 0, y: 0)
            self.searchTextfield.becomeFirstResponder()
        })
    }
    
    func updateDashboard() {
        DispatchQueue.main.async {
            self.collectionView.reloadData()
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.configureCollectionView()
        self.configureComponents()
    }
    
    func configureComponents() {
        self.searchTextfield.layer.opacity = 0
        self.searchTextfield.transform = CGAffineTransform(translationX: UIScreen.main.bounds.width + 100, y: 0)
        self.searchTextfield.layer.opacity = 0
        self.searchTextfield.delegate = self
        // Register for keyboard hide notifications
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardDidHide), name: UIResponder.keyboardDidHideNotification, object: nil)
        // Handle keyboard hide event
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(dismissKeyboard))
        view.addGestureRecognizer(tapGesture)
     
    }
    
    @objc func keyboardDidHide() {
        
        UIView.animate(withDuration: 0.3, animations: {
            self.searchTextfield.transform = CGAffineTransform(translationX: UIScreen.main.bounds.width + 100, y: 0)
            self.searchTextfield.layer.opacity = 0
            self.labelHeaderView.transform = CGAffineTransform(translationX: 0, y: 0)
            self.view.endEditing(true)
        })
    }



    // Handle tap gesture event
    @objc func dismissKeyboard() {
        view.endEditing(true)
        cancelSearch()
    }
    
    @objc func cancelSearch() {
         self.searchTextfield.resignFirstResponder()
         UIView.animate(withDuration: 0.3, animations: {
             self.searchTextfield.transform = CGAffineTransform(translationX: UIScreen.main.bounds.width + 100, y: 0)
             self.searchTextfield.layer.opacity = 0
             self.labelHeaderView.transform = CGAffineTransform(translationX: 0, y: 0)
         })
        self.presenter?.unfilterConfiguration()
     }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        CVLoader.startLoading()
        presenter?.tryFetchSections()        
    }
    
}

extension MovieHubViewController: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        1
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "CVMovieCollectionViewCell", for: indexPath) as! CVMovieCollectionViewCell
        cell.section = self.presenter?.filteredConfiguration[indexPath.section]
        cell.parentVC = self
        return cell
    }
    
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return self.presenter?.filteredConfiguration.count ?? 0
    }
    
    
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let cellWidth = collectionView.frame.width
        return CGSize(width: cellWidth, height: 300)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        if let headerView = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: MovieHeaderCollectionReusableView.reuseIdentifier, for: indexPath) as? MovieHeaderCollectionReusableView {
            headerView.headerTitle = self.presenter?.configuration[indexPath.section].sectionName ?? ""
            return headerView
        } else {
            fatalError("Unable to dequeue header view")
        }
    }
    
    
}


extension MovieHubViewController: UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        guard let currentText = textField.text else {
            self.presenter?.unfilterConfiguration()
            self.updateDashboard()
            return true
        }
     
        let updatedText = (currentText as NSString).replacingCharacters(in: range, with: string)
        if updatedText == "" {
            self.presenter?.unfilterConfiguration()
            self.updateDashboard()
            return true
        }
        self.presenter?.filterConfigurationByTitle(updatedText)
        self.updateDashboard()
        return true
    }
}
